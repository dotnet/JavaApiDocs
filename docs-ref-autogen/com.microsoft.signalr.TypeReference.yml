### YamlMime:JavaType
uid: "com.microsoft.signalr.TypeReference"
fullName: "com.microsoft.signalr.TypeReference<T>"
name: "TypeReference<T>"
nameWithType: "TypeReference<T>"
summary: "A utility for getting a Java Type from a literal generic Class."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class TypeReference<T>"
constructors:
- uid: "com.microsoft.signalr.TypeReference.TypeReference()"
  fullName: "com.microsoft.signalr.TypeReference<T>.TypeReference()"
  name: "TypeReference()"
  nameWithType: "TypeReference<T>.TypeReference()"
  summary: "Creates a new instance of <xref uid=\"com.microsoft.signalr.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>."
  syntax: "public TypeReference()"
  desc: "Creates a new instance of <xref uid=\"com.microsoft.signalr.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>. This class implements Super Type Tokens (Gafter's Gadget) as a way to get a reference to generic types in spite of type erasure since, sadly, `Foo.class` is not valid Java. To get the Type of Class `Foo`, use the following syntax:\n\n```java\nType fooBarType = (new TypeReference>() { }).getType();\n```\n\nTo get the Type of class Foo, use a regular Type Token:\n\n```java\nType fooType = Foo.class;\n```"
methods:
- uid: "com.microsoft.signalr.TypeReference.getType()"
  fullName: "com.microsoft.signalr.TypeReference<T>.getType()"
  name: "getType()"
  nameWithType: "TypeReference<T>.getType()"
  summary: "Gets the referenced type."
  syntax: "public Type getType()"
  desc: "Gets the referenced type."
  returns:
    description: "The Type encapsulated by this TypeReference"
    type: "<xref href=\"java.lang.reflect.Type?alt=java.lang.reflect.Type&text=Type\" data-throw-if-not-resolved=\"False\" />"
type: "class"
typeParameters:
- name: "T"
desc: "A utility for getting a Java Type from a literal generic Class."
metadata: {}
package: "com.microsoft.signalr"
artifact: com.microsoft.signalr:signalr:5.0.10
